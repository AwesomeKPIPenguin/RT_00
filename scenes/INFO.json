{
  "//": "Here you can see valid scene file format and some rules, creating it.",

  "//": "Comments are not allowed in json, but our parser",
  "//": "reads only needed keys, so any key, which is not defined, ignored.",

  "//": "Your file must contain only one object - scene (we are here now).",

  "//": "Next data types are used:",

  "//": "STRING    - just string",
  "//": "COLOR     - hexadecimal number, provided as a string in next format:",
  "//": "            \"0xrrggbb\" (case-insensitive)",
  "//": "FLOAT     - standard json number, but without 'e/E' support",
  "//": "COEF      - just like FLOAT, but it should be bounded from 0.0 to 1.0",
  "//": "POINT     - json object with valid keys 'x', 'y' and 'z',",
  "//": "            taking FLOAT as a value",
  "//": "CAMERA    - json object with next valid keys:",
  "//": "              'origin' - POINT, position of the camera;",
  "//": "              'alpha', 'beta' and 'gamma' - FLOAT, rotation angles,",
  "//": "                (in degrees);",
  "//": "              'fov' - FLOAT, Field Of View, in degrees",
  "//": "                (bounded from 60 to 120);",
  "//": "LIGHT     - json object with next valid keys:",
  "//": "              'type' - STRING, defining type of the light,",
  "//": "                valid are: 'point', and 'direct'",
  "//": "              'origin' - POINT, position of the light",
  "//": "                (used for point type)",
  "//": "              'direct' - POINT, direction of the light",
  "//": "                (used for direct type)",
  "//": "              'bright' - COEF, brightness of the light source",
  "//": "              'color' - COLOR, color of the light",
  "//": "OBJECT    - json object with next valid keys:",
  "//": "              'name' - STRING, defining type of the object,",
  "//": "                valid are: 'plane', 'sphere' and 'cone'",
  "//": "              'color' - COLOR, color of the object;",
  "//": "              'ambnt' - COEF, ambient lighting;",
  "//": "              'diff' - COEF, part of the object own color in result",
  "//": "              'spclr' - COEF, object reflection coef",
  "//": "              's_blur' - COEF, object reflection blur coef",
  "//": "              'trans' - COEF, object transparency coef",
  "//": "              't_blur' - COEF, object transparency blur coef",
  "//": "              'phong' - COEF, coef of the Phong effect (shining)",
  "//": "              'translate' - POINT, this vector will be added",
  "//": "                to the object position",
  "//": "              'rotate' - POINT, assuming that point coords",
  "//": "                are 3 angles, object will be rotated using them",
  "//": "             Also, there are additional keys for each specific object",
  "//": "Next keys are valid for scene object:",

  "//": "Scene name",
  "name": "NAME",

  "//": "Background color",
  "bg_color": "0x0"
}